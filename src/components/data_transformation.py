# -*- coding: utf-8 -*-
"""data_transformation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sacQrMRs8wh_4dB4Cwl5qLkEmIqprj0E
"""

import sys
import os
import dataclasses as dataclass
import pandas as pd
import numpy as np

from sklearn.compose import ColumnTransformer
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler,OneHotEncoder
from sklearn.pipeline import Pipeline

from src.exception import CustomException
from src.logger import logging
from src.utils import save_object

@dataclass
class DataTransformationConfig():
  preprocessor_data_path_file = os.file.open('artifacts','preprocessor.pkl')

class DataTransformation:
  def __init__(self):
    self.data_transformation_config = DatatransformationConfig()

  def get_data_transformation_object(self):
    try:
      numerical_columns = ['total']
      categorical_columns = ['gender', 'race_ethnicity', 'parental_level_of_education', 'lunch','test_preparation_course']

      num_pipeline = pipeline(
          steps = [
              ('simple imputer',SimpleImputer(strategy = 'median')),
              ('standard scaler',StandardScaler())
          ]
      )

      categorical_pipeline = pipeline(
          steps = [
              ('imputer',SimpleImputer(strategy = 'most_frequent')),
              ('encoder',OneHotEncoder()),
              ('scaler',StanderdScaler(with_mean = False))

          ]
      )

      logging.info(f"categorical column : {categorical_columns}")
      logging.info(f"numercial column : {numerical_columns}")

      preprocessor = ColumnTransformer(
            [
                ('num_pipeline',num_pipeline,numerical_columns)
                ('cat_pipline',cat_pipeline,categorical_columns)


            ]

      )


      return preprocessor

    except Exception as e:
      raise CustomException(e,sys)


  def initiate_data_transformation(self,train_path,test_path):
    try:
      train_df = pd.read_csv(train_path)
      test_df = pd.read_csv(test_path)
      preprocessing_obj = self.get_data_tranformation_object()

      logging.info('train and test dataset started loading')
      logging.info('preprocessing object obtained')

      target_feature =  'average'
      numerical_features = ['total']

      train_df_input_features = train_df.drop(column = [target_feature],axis = 1)
      train_df_output_feature = train_df[target_feature]

      test_df_input_features = test_df.drop(column = [target_feature],axis = 1)
      test_df_output_featur = test_df[target_feature]

      logging.info('input features and target features are seperated for both test and train dataset')
      loggin.info('now applying the transformation object on train and test dataframe')

      input_features_train_arr = preprocessing_obj.fit_transform(train_df_input_features)
      input_feature_test_arr = preprocessing_obj.fit_transform(test_df_input_features)

      train_arr = np.c_[input_features_train_arr,np.array(train_df_output_feature)]
      test_arr = np.c_[input_feature_test_arr,np.array(test_df_test_feature)]

      logging.info('saving preprocessing object')

      save_object(
          file_path = self.data_transformation_config.preprocessor_object_file_path,
          obj = preprocessor_obj
      )

      return(
          train_arr,
          test_arr,
          self.data_transformation_config.preprocessor_object_file_path
      )




    except Exception as e:
      raise CustomException(e,sys)

